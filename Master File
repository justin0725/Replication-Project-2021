setwd("/Users/justingiles/Desktop/Grad School/MPP Fall 2020/Stats/Replication Project/pubpol813_replication_project-master")

# load packages
library(haven)
library(tidyverse)
library(config)
library(purrr)
library(magrittr)

# import config
config <- config::get()
policy_year <- config$policy_year

# read in data
acs_over24_df <- haven::read_stata("/Users/justingiles/Desktop/Grad School/MPP Fall 2020/Stats/Replication Project/ACS_PPS813_F2021_revised.dta")
acs_under24_df <- haven::read_stata("/Users/justingiles/Desktop/Grad School/MPP Fall 2020/Stats/Replication Project/ACS_PPS813_F2021_15to24.dta")

# append data
acs_df <- rbind.data.frame(acs_over24_df, acs_under24_df)

## DACA ELIGIBILITY - this section mostly copied from Joe's code with some minor changes
# 1) no lawful status as of June 15, 2012
# 2) applicants came to US before age 16
# 3) under the age of 31 as of June 2012
# 4) continuously resided in US since June 2007
# 5) high school diploma or GED
# 6) no felony
acs <- acs_df %>% 
  filter(educ >= 6) %>% # filter to only high school grads and up / believe this is already done
  mutate(qob_age_adjustment = case_when(birthqtr <= 2 ~ 0,
                                        birthqtr > 2 ~ 1,
                                        TRUE ~ -9),
         age_june_2012 = policy_year - birthyr - qob_age_adjustment,  # subtract 1 if born after June
         age_june_2012_elig = ifelse(age_june_2012 < 31, 1, 0),
         age_of_entry = age - yrsusa1,
         age_of_entry_elig = ifelse(age_of_entry < 16,1,0),
         cont_residence_elig = ifelse(yrimmig <= 2007, 1, 0),
         eligible = age_june_2012_elig * age_of_entry_elig * cont_residence_elig,
         eligibility_groups = case_when(citizen >= 4 ~ 'other',
                                        citizen >= 0 & citizen <= 2 & age_june_2012_elig == 1 ~ 'citizen_daca',
                                        citizen == 3 & eligible == 1 ~ 'noncitizen_daca',
                                        citizen == 3 & eligible == 0 ~ 'noncitizen_nondaca')
  )



# make variables for each row of Table 1
# already in dataset in usable form:
# income: inctot
# usual hours worked per week: uhrswork
# years in the US: yrsusa1
# age of entry: age_of_entry
# age" age
# prep data frame has new variables of interest; will be used throughout analysis
prep <- acs %>%
  mutate(working = case_when(wrklstwk == 2 ~ 1, # create relevant variables where they don't already exist
                             wrklstwk == 3 ~ -9, # nonresponse is -9
                             TRUE ~ 0),
         working = ifelse(working == -9, NA, working), # recode -9 as NA so regression won't use it
         in_labor_force = ifelse(labforce==2, 1, 0),
         unemployed = ifelse(empstat==2, 1, 0),
         worked_past_year = ifelse(workedyr==3, 1, 0),
         self_employed = ifelse(classwkr==1, 1, 0), # I can't find the documentation for this one
         in_school = ifelse(school==2, 1, 0),
         has_GED = ifelse((educd==62 | educd==64), 1, 0),
         male = ifelse(sex==1, 1, 0),
         white = ifelse(race==1, 1, 0),
         black = ifelse(race==2, 1, 0),
         asian = ifelse((race==4 | race==5 | race==6), 1, 0),
         #hispanic = ifelse(hispan != 0, 1, 0),
         spanish_home = ifelse(language==12, 1, 0),
         latin_birthplace = ifelse((bpl>=200 & bpl<=300), 1, 0),
         married = ifelse((marst==1 | marst==2), 1, 0),
         in_metro = ifelse((metro==2 | metro==3 | metro==4), 1, 0),
         high_school = ifelse((educd>=62 & educd<=64), 1, 0),
         some_college = ifelse((educd>=65 & educd<=100), 1, 0),
         college_degree = ifelse((educd>=101 & educd<=116), 1, 0),
  # this is the dividing point between variables used in Table 1 and variables used only in models and graphs
         after = ifelse(year>2012, 1, 0),
         #inc_adjusted = case_when(inctot < 0 ~ 0,
                                  #inctot >= 0 ~ inctot),
         #loginc_plusone = (inc_adjusted + 1) %>% log()
         poverty_binary = case_when(poverty==0 ~ -100,
                                    (poverty>=1 & poverty<=100) ~ 1,
                                    poverty>100 ~ 0)
         )


######################################
# State unemployment section - copied from Joe's code with my data frame names put in
######################################
###################
# create state/year unemployment level variable
state_unemployed <- prep %>% 
  filter(unemployed != -9) %>% 
  group_by(year, statefip) %>% 
  summarise(state_unemployment = mean(unemployed))
# join on state/year unemployment and select columns of interest
# filter to only non-citizens
prep <- prep %>% 
  left_join(state_unemployed, by = c("year", "statefip"))
################################
# END State unemployment section
#################################


# frequently will use data frame limited to 'noncitizen_daca' and 'noncitizen_nondaca'
noncit <- filter(prep,
                 eligibility_groups=='noncitizen_daca' |
                  eligibility_groups=='noncitizen_nondaca')

# clear up some memory
rm(acs_over24_df, acs_under24_df, acs_df)



##############################################################################################
##############################################################################################
# Make a function that estimates models and returns relevant coefficients/standard errors
##############################################################################################
##############################################################################################

get_panel <- function(df) { 
  library(fixest)
  # Estimate all models for a panel
  models <- feols(data = df,
                  #'hetero', # robust standard errors?
                  cluster = c("statefip", "year"),
                  collin.tol = 0.000000000000000000001,
                  fml =
                    # outcome variables
                    c(working,
                      in_labor_force,
                      unemployed,
                      inctot,
                      uhrswork,
                      worked_past_year,
                      self_employed,
                      in_school,
                      has_GED) ~
                    eligible +
                    after +
                    eligible:after +
                    some_college + 
                    college_degree +
                    male  +
                    black +
                    asian +
                    married +
                    state_unemployment |
                    age +
                    age_of_entry +
                    year +
                    statefip +
                    statefip^year
  ) # End regression part
  
  # Make column and row labels
  columns_key <- c("Variables",
                   "Working",
                   "Labor Force",
                   "Unemployed",
                   "Income",
                   "Hours per week",
                   "Worked in past year",
                   "Self-employed",
                   "School",
                   "GED")
  row_key <- c("Eligible*After",
               "(Standard Error)",
               "Eligible",
               "(Standard Error)",
               "Observations",
               "R-squared")
               
  # get relevant values
  did <- c()
  elig <- c()
  d.se <- c()
  e.se <- c()
  obs <- c()
  rsq <- c()
  for (i in 1:9) {
    did <- models[[i]]$coefficients[2] %>% as.numeric() %>%
      append(did, .)
    elig <- models[[i]]$coefficients[1] %>% as.numeric() %>%
      append(elig, .)
    d.se <- models[[i]]$se[2] %>% as.numeric() %>%
      append(d.se, .)
    e.se <- models[[i]]$se[1] %>% as.numeric() %>%
      append(e.se, .)
    obs <- models[[i]]$nobs %>% as.numeric() %>%
      append(obs, .)
    rsq <- models[[i]]$sq.cor %>% as.numeric() %>%
      append(rsq, .)
  }
  
  # put relevant values into a data frame, spit it out of the function
  panel <- rbind(did, d.se, elig, e.se, obs, rsq) %>%
    as.data.frame() %>%
    cbind(row_key, .)
  colnames(panel) <- columns_key
  panel # return the data frame of values of interest
}

############################################
############################################
END get_panel() FUNCTION
############################################
############################################




############################
############################
# Table 2
############################
############################

# get data frames of each panel's info
panelA_df <- get_panel(noncit %>%
                         filter(year<=2014) %>%
                         filter(age>=12 & age<=19)
                       )
panelB_df <- get_panel(noncit %>%
                         filter(year<=2014) %>%
                         filter(age_june_2012>=27 & age_june_2012<=34) %>%
                         filter(age_of_entry < 16)
                       )
panelC_df <- get_panel(noncit %>%
                         filter(year<=2014) %>%
                         filter(age>=18 & age<=35)
                       )
panelD_df <- get_panel(prep %>%
                         filter(year<=2014) %>%
                         filter(age>=18 & age<=35) %>%
                         # next line sets all "eligible" values to 0 if it's for a US citizen
                         mutate(eligible = ifelse(citizen >= 0 & citizen <= 2, 0, eligible)
                                )
                       )

# Need to format data frames into tables
View(panelA_df)
View(panelB_df)
View(panelC_df)
View(panelD_df)
