# function that estimates model for desired outcome variables and spits out data frame
# containing after*eligible and eligible coefficients and standard errors for each model

# the data frame returned is structured similarly to the panels in table 2 as seen in the paper,
# which allows it to be easily formatted later with the gt package

get_panel <- function(df) {
  library(fixest)
  # Estimate all models for a panel
  models <- feols(data = df,
                  #'hetero', # robust standard errors?
                  cluster = c("statefip^year"),
                  collin.tol = 0.000000000000000000001,
                  fml =
           # outcome variables
                    c(working,
                      in_labor_force,
                      unemployed,
                      inctot,
                      uhrswork,
                      worked_past_year,
                      self_employed,
                      in_school,
                      has_GED) ~
          # independant variables
                    eligible:after +
                    eligible +
                    after +
                    some_college + 
                    college_degree +
                    male  +
                    black +
                    asian +
                    married +
                    state_unemployment |
          # fixed effects
                    age +
                    age_of_entry +
                    year +
                    statefip +
                    statefip^year
  ) ####### END OF REGRESSION PART
  
# Make column and row labels
  columns_key <- c("Variables",
                   "Working",
                   "Labor Force",
                   "Unemployed",
                   "Income",
                   "Hours per week",
                   "Worked in past year",
                   "Self-employed",
                   "School",
                   "GED")
  row_key <- c("Eligible*After",
               "(Standard Error)",
               "Eligible",
               "(Standard Error)",
               "Observations",
               "R-squared")
  
# empty vectors to be filled with coefficients, standard errors, observation number, r-squared
  did <- c() 
  elig <- c()
  d.se <- c()
  e.se <- c()
  obs <- c()
  rsq <- c()
  
# extract coefficients, standard errors, observation number, r-squared, and append to above vectors
  for (i in 1:9) {
    did <- models[[i]]$coefficients[["eligible:after"]] %>%
      round(digits = 3) %>%
      append(did, .)
    elig <- models[[i]]$coefficients[["eligible"]] %>%
      round(digits = 3) %>%
      append(elig, .)
    d.se <- models[[i]]$se[["eligible:after"]] %>%
      round(digits = 3) %>%
      append(d.se, .)
    e.se <- models[[i]]$se[["eligible"]] %>%
      round(digits = 3) %>%
      append(e.se, .)
    obs <- models[[i]]$nobs %>%
      append(obs, .)
    rsq <- models[[i]]$sq.cor %>%
      round(digits = 3) %>%
      append(rsq, .)
    # get p-values
    did_pvalue <- (as.numeric(did[i]) / as.numeric(d.se[i])) %>%
      pt(df=obs[i]-1, lower.tail=FALSE) %>% multiply_by(2)
    elig_pvalue <- (as.numeric(elig[i]) / as.numeric(e.se[i])) %>%
      pt(df=obs[i]-1, lower.tail=FALSE) %>% multiply_by(2)
    # add *** or ** or * for significance
    # for DiD coeffs
    if (did_pvalue <= 0.01) {
      did[i] <- paste(did[i], "***", sep = "")
    } else if (did_pvalue <= 0.05) {
      did[i] <- paste(did[i], "**", sep = "")
    } else if (did_pvalue <= 0.10) {
      did[i] <- paste(did[i], "*", sep = "")
    } else {}
    # for eligible coeffs
    if (elig_pvalue <= 0.01) {
      elig[i] <- paste(elig[i], "***", sep = "")
    } else if (elig_pvalue <= 0.05) {
      elig[i] <- paste(elig[i], "**", sep = "")
    } else if (elig_pvalue <= 0.10) {
      elig[i] <- paste(elig[i], "*", sep = "")
    } else {}
# add parantheses around the standard errors
    d.se[i] <- d.se[i] %>% paste("(", ., sep = "") %>%
      paste(")", sep = "")
    e.se[i] <- e.se[i] %>% paste("(", ., sep = "") %>%
      paste(")", sep = "")
  }
  
# combine above vectors into a data frame
  panel <- rbind(did, d.se, elig, e.se, obs, rsq) %>%
    as.data.frame() %>%
    cbind(row_key, .)
  colnames(panel) <- columns_key
  
# return the data frame
  panel
  
} ########### END FUNCTION

